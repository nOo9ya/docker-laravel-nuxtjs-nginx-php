version: '3'

# --------------------- Enabled services ---------------------
# mariadb - mariadb
# redis - redis
# php - php8.2
# web - nginx_web
# --------------------- only live services ------------
# nuxt - node20
# --------------------- Disabled services ---------------------
# postgres
# --------------------- only development services ------------
# mailhog - mailhog
# node - node20

services:
  mariadb:
    container_name: mariadb
    image: mariadb:11.4
    restart: unless-stopped
    ports:
      - '${DB_FORWARD_PORT}:${DB_PORT}'
    environment:
      MYSQL_ROOT_PASSWORD: '${DB_ROOT_PASSWORD}'
      MYSQL_HOST: '${DB_HOST}'
      #      MYSQL_ROOT_HOST: '${DB_HOST}'
      MYSQL_ROOT_HOST: '%'
      MYSQL_DATABASE: '${DB_DATABASE}'
      MYSQL_USER: '${DB_USERNAME}'
      MYSQL_PASSWORD: '${DB_PASSWORD}'
      TZ: '${TZ}'
    volumes:
      - ./.database/mariadb:/var/lib/mysql
      - ./.logs/mariadb:/var/log/mariadb
    command:
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
    networks:
      - docker-network

#  postgresql:
#    container_name: postgresql
#    image: postgres:14.4-alpine
#    restart: unless-stopped
#    ports:
#      - '${PG_DB_FORWARD_PORT}:${PG_DB_PORT}'
#    environment:
#      POSTGRES_DB: '${PG_DB_DATABASE}'
#      POSTGRES_USER: '${PG_DB_USERNAME}'
#      POSTGRES_PASSWORD: '${PG_DB_PASSWORD}'
#    volumes:
#      - ./.database/postgresql:/var/lib/postgresql/data
#      - ./.logs/postgresql:/var/log/postgresql
#    networks:
#      - docker-network

  redis:
    container_name: redis
    image: redis:alpine
    restart: unless-stopped
    privileged: true
    volumes:
      - ./.docker/redis/redis.conf:/usr/local/redis/redis.conf
      - ./.database/redis:/data
    ports:
      - '${REDIS_FORWARD_PORT}:${REDIS_PORT}'
    command:
      - redis-server
      - /usr/local/redis/redis.conf
    networks:
      - docker-network
    healthcheck:
      test: [ 'CMD', 'redis-cli', 'ping' ]
      retries: 3
      timeout: 5s

  php:
    container_name: php8.2
    build:
      context: .
      dockerfile: .docker/php/8.2/${DOCKER_FILE:-Dockerfile}
      args:
        # - APP_ENV='production'
        - APP_ENV=${APP_ENV:-local}
        - WORK_DIR=${BACKEND_DIR}
        - TZ=${TZ}
        - UID=${UID:-1000}
        - GID=${GID:-1000}
        - USER=${USER:-www-data}
    restart: unless-stopped
    expose:
      - '9000'
    volumes:
      - ./.logs/${BACKEND}:/var/log/${BACKEND}
      - ./.logs/supervisor:/var/log/supervisor
      - ./${BACKEND}:/var/www/${BACKEND}
    environment:
      PHP_IDE_CONFIG: ${PHP_IDE_CONFIG:-serverName=docker-php}
      XDEBUG_MODE: ${XDEBUG_MODE:-off}
      XDEBUG_CONFIG: "client_host=host.docker.internal"
      XDEBUG_TRIGGER: 'yes'
    extra_hosts:
      - host.docker.internal:${HOST_IP:-172.17.0.1}
    networks:
      - docker-network
    depends_on:
      - mariadb
      - redis
#      - postgresql

  nuxt:
    container_name: nuxt-js
    build:
      context: .
      dockerfile: .docker/${FRONTEND}/${DOCKER_FILE:-Dockerfile}
      args:
        - WORK_DIR=${FRONTEND_DIR}
        - FRONTEND=${FRONTEND}
#    command: "npm run build && npm run start"
    restart: unless-stopped
    volumes:
      - ./nuxt:${FRONTEND_DIR}
      - ./.logs/${FRONTEND}:/var/log/${FRONTEND}
    ports:
      - "${NUXT_FORWARD_PORT}:${NUXT_PORT}"
    networks:
      - docker-network

  #  mailhog:
  #    image: mailhog/mailhog:latest
  #    container_name: mailhog
  #    logging:
  #      driver: 'none'
  #    ports:
  #      - "1025:1025"
  #      - "8025:8025"
  #    networks:
  #      - docker-network

  # node:
  #   container_name: node20
  #   image: node:20-alpine
  #   volumes:
  #     - ./laravel:/var/www/laravel
  #   ports:
  #     - "3000:3000"
  #     # - "4000:4000"
  #   working_dir: /var/www/laravel
  #   depends_on:
  #     - web
  #   entrypoint: [ 'npm' ]
  #   networks:
  #     - docker-network

  certbot:
    container_name: certbot
    image: certbot/certbot
    volumes:
      - ./.certbot/conf:/etc/letsencrypt
      - ./.certbot/www:/var/www/certbot
      - ./.logs/letsencrypt:/var/log/letsencrypt
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    networks:
      - docker-network

  nginx:
    container_name: nginx_web
    build:
      context: .
      dockerfile: .docker/nginx/web/Dockerfile
      args:
        - UID=${UID:-1000}
        - GID=${GID:-1000}
        - USER=${USER:-www-data}
        - TZ=${TZ}
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./.docker/nginx/web/nginx.conf:/etc/nginx/nginx.conf
      - ./.docker/nginx/web/ssl:/var/www/ssl
      - ./.logs/nginx:/var/log/nginx
      - ./.certbot/conf:/etc/letsencrypt
      - ./.certbot/www:/var/www/certbot
      - ./${BACKEND}:/var/www/${BACKEND}
      - ./${FRONTEND}:/var/www/${FRONTEND}
    depends_on:
      - php
      - mariadb
#      - postgresql
      - redis
      - nuxt
    networks:
      - docker-network

networks:
  docker-network: